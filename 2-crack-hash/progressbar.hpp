#ifndef PROGRESSBAR_HPP
#define PROGRESSBAR_HPP

#include <cstring>
#include <iostream>
#include <ostream>
#include <string>
#include <vector>

#define BAR_LEN 50

class progressbar {
private:
  char done_char;
  char todo_char;
  char opening_bracket_char;
  char closing_bracket_char;
  int32_t lastLineCharNum;
  std::ostream &output;

public:
  // default constructor, must call set_niter later
  inline progressbar(std::ostream &out = std::cout)
      : done_char('#'), todo_char(' '), opening_bracket_char('['),
        closing_bracket_char(']'), lastLineCharNum(0), output(out) {}

  // default destructor
  ~progressbar() = default;
  // delete everything else
  progressbar(progressbar const &) = delete;
  progressbar &operator=(progressbar const &) = delete;
  progressbar(progressbar &&) = delete;
  progressbar &operator=(progressbar &&) = delete;

  // reset bar to use it again
  inline void reset() { lastLineCharNum = 0; }
  // chose your style
  inline void set_done_char(char sym) { done_char = sym; }
  inline void set_todo_char(char sym) { todo_char = sym; }
  inline void set_opening_bracket_char(char sym) { opening_bracket_char = sym; }
  inline void set_closing_bracket_char(char sym) { closing_bracket_char = sym; }
  // set the output stream
  inline void set_output_stream(const std::ostream &stream) {
    output.rdbuf(stream.rdbuf());
  }
  // display
  inline void display(int32_t progress);
};

inline void progressbar::display(int32_t percentage) {
  // erase last print bar
  std::vector<char> eraser(lastLineCharNum, '\b');
  output.write(eraser.data(), eraser.size());

  // construct new bar
  std::vector<char> bar(BAR_LEN + 2, todo_char);
  bar.push_back('\0');
  bar[0] = opening_bracket_char;
  bar[BAR_LEN + 1] = closing_bracket_char;
  int pos = BAR_LEN * percentage / 100;
  std::memset(&bar[1], done_char, pos);
  bar.push_back(' ');
  // print
  if (percentage / 100 == 0) {
    // w/o hundreds digit
    bar.push_back(' ');
    if (percentage / 10 % 10 == 0) {
      // w/o tens digit
      bar.push_back(' ');
    } else {
      // w tens digit
      bar.push_back('0' + percentage / 10 % 10);
    }
  } else {
    // w hundreds digit
    bar.push_back('0' + percentage / 100);
    // w tens digit
    bar.push_back('0' + percentage / 10 % 10);
  }
  // w ones digit
  bar.push_back('0' + percentage % 10);
  bar.push_back('%');
  // write new bar
  output.write(bar.data(), bar.size());
  output.flush();
  // update lastLineCharNum
  lastLineCharNum = bar.size();
}

#endif